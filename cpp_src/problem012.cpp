// Project Euler Problem 012 Solution
//
// Problem statement: The sequence of triangle numbers is generated by adding the natural numbers. So the 7^{th} triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:<p style="text-align:center;">1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...Let us list the factors of the first seven triangle numbers:<blockquote style="font-family:'courier new';"><b> 1</b>: 1<br /><b> 3</b>: 1,3<br /><b> 6</b>: 1,2,3,6<br /><b>10</b>: 1,2,5,10<br /><b>15</b>: 1,3,5,15<br /><b>21</b>: 1,3,7,21<br /><b>28</b>: 1,2,4,7,14,28</blockquote>We can see that 28 is the first triangle number to have over five divisors.What is the value of the first triangle number to have over five hundred divisors?
//
// Solution description:
//
// Author: Tom Praschan
// 2019/03/08
// License: MIT (see ../LICENSE.md)

#include "problem012.hpp"
#include "prime_utils.hpp"
#include <omp.h>
#include <fmt/format.h>
#include <vector>
#include <numeric> // For std::accumulate 

// First find the prime factorization of n, 
// then the number of divisors is given by the product
// of the powers of the prime factors + 1
unsigned num_divisors(unsigned n) {
    if (n == 1) return 1;
    if (n == 2) return 2;
    if (is_prime(n)) return 2;
    //Stores the powers of the prime factors
    std::vector<unsigned> powers; 

    const int max = sqrt(n);

    //Special case: n is even
    if (n % 2 == 0) {
        unsigned p = 0;
        do {
            n /= 2;
            p++;
        } while (n % 2 == 0);
        powers.push_back(p + 1);
    }
    for (unsigned i = 3; i <= max; i+=2) {
        if (n % i == 0 && is_prime(i)) {
            unsigned p = 0;
            do {
                n /= i;
                p++;
            } while (n % i == 0);
            powers.push_back(p + 1);
        }
    }

    return std::accumulate(powers.begin(), powers.end(), 1, std::multiplies<unsigned>());
}

// Return the nth triangle number using Gauß' formula
unsigned triangle_number(unsigned n) {
    return (n * (n + 1)) / 2;
}

#ifndef TESTING
int main(int argc, char **argv) {
    auto start = omp_get_wtime();
    unsigned n = 1;
    for (n = 1; num_divisors(triangle_number(n)) <= 500; n++) {}
    auto solution = triangle_number(n);
    auto end = omp_get_wtime();

    fmt::print("Solution: {} \n", solution);
    fmt::print("Elapsed time: {}s \n", end - start);
}
#endif
