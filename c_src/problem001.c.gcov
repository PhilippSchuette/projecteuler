        -:    0:Source:problem001.c
        -:    0:Graph:p1.gcno
        -:    0:Data:p1.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1:/* Project Euler Problem 1 Solution
        -:    2: *
        -:    3: * Problem statement:
        -:    4: * If we list all the natural numbers below 10 that are multiples
        -:    5: * of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
        -:    6: * Find the sum of all the multiples of 3 or 5 below 1000.
        -:    7: *
        -:    8: * Solution description:
        -:    9: * This script uses a similar formula-based algorithm as the python
        -:   10: * implemented solution '../py_src/problem001.py'.
        -:   11: *
        -:   12: * Author: Philipp Schuette, Daniel Schuette
        -:   13: * Date: 2019/02/19
        -:   14: * License: MIT (see ../LICENSE.md)
        -:   15: */
        -:   16:#include <stdio.h>
        -:   17:#include <stdlib.h>
        -:   18:#include "utest.h"
        -:   19:
        -:   20:#define  DEFAULT_BOUND   1000
        -:   21:#define  CONSTRAINT_1    3
        -:   22:#define  CONSTRAINT_2    5
        -:   23:#define  EXPECTED_RSLT   233168
        -:   24:#define  WRONG_RSLT      233169
        -:   25:
        -:   26:long summation(long, long);
        -:   27:
        4:   28:int main(int argc, char **argv)
        -:   29:{
        -:   30:    long    sum;
        -:   31:    long    bound;
        -:   32:
        -:   33:    /* initialize unit testing */
        4:   34:    utest_init(&argc, argv);
        -:   35:
        -:   36:    /* parse cli arguments */
        4:   37:    switch (argc) {
        1:   38:        case 1:
        1:   39:            bound = DEFAULT_BOUND;
        1:   40:            break;
        2:   41:        case 2:
        2:   42:            bound = atol(argv[1]);
        2:   43:            if (bound == 0) {
        1:   44:                fprintf(stderr, "%s: warning: %s is not valid, taking default (%d)\n",
        1:   45:                        argv[0], argv[1], DEFAULT_BOUND);
        1:   46:                bound = DEFAULT_BOUND;
        -:   47:            }
        2:   48:            break;
        1:   49:        default:
        1:   50:            fprintf(stderr, "%s: warning: too many arguments, taking default (%d)\n",
        -:   51:                    argv[0], DEFAULT_BOUND);
        1:   52:            bound = DEFAULT_BOUND;
        1:   53:            break;
        -:   54:    }
        -:   55:
        -:   56:    /* calculate results */
        4:   57:    sum = summation(CONSTRAINT_1, bound) +
        4:   58:            summation(CONSTRAINT_2, bound) -
        4:   59:            summation(CONSTRAINT_1*CONSTRAINT_2, bound);
        -:   60:
        -:   61:    /* assert equality of calculated and expected result */
        4:   62:    assert_equal(sum, EXPECTED_RSLT,
        -:   63:                 "testing equality of calulated and expected result");
        4:   64:    assert_not_equal(sum, WRONG_RSLT,
        -:   65:                     "testing unequality of calculated and wrong result");
        4:   66:    print_rslt_tbl();
        -:   67:
        4:   68:    fprintf(stdout, "%s: solution: %ld\n", argv[0], sum);
        4:   69:    return 0;
        -:   70:}
        -:   71:
        -:   72:/*
        -:   73: * Calculates the sum of all multiples of x between
        -:   74: * 0 and target.
        -:   75: */
       12:   76:long summation(long x, long target)
        -:   77:{
       12:   78:    long n = (target - 1)/x;
       12:   79:    return (long)(x*n*(n + 1)/2);
        -:   80:}
