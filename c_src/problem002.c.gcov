        -:    0:Source:problem002.c
        -:    0:Graph:p2.gcno
        -:    0:Data:p2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:/* Project Euler Problem 2 Solution:
        -:    2: *
        -:    3: * Problem statement:
        -:    4: * Each new term in the Fibonacci sequence
        -:    5: * is generated by adding the previous two
        -:    6: * terms. By starting with 1 and 2, the
        -:    7: * first 10 terms will be: 1, 1, 2, 3, 5, 8, 13,
        -:    8: * 21, 34, 55, ...
        -:    9: * By considering the terms in the Fibonacci
        -:   10: * sequence whose values do not exceed four
        -:   11: * million, find the sum of the even-valued
        -:   12: * terms.
        -:   13: *
        -:   14: * Solution description:
        -:   15: * Brute force approach, using only the fact that
        -:   16: * only every third Fibonacci number is even (which
        -:   17: * follows by the recursive definition and the
        -:   18: * fact that the sum of an even and an odd number is
        -:   19: * odd, while the sum of two even or two odd numbers
        -:   20: * is even.
        -:   21: *
        -:   22: * Author: Philipp Schuette
        -:   23: * Date: 2019/02/19
        -:   24: * License: MIT (see ../LICENSE.md)
        -:   25: */
        -:   26:#include <stdio.h>
        -:   27:#include <stdlib.h>
        -:   28:
        -:   29:#define TARGET 4000000
        -:   30:
        1:   31:int main(int argc, char **argv)
        -:   32:{
        1:   33:    int     sum = 0;
        1:   34:    int     i = 1, j = 1, k = 2;
        1:   35:    int     even = 0;
        -:   36:
       32:   37:    while (k <= TARGET) {
       31:   38:        if (even == 0) sum = sum + k;
       31:   39:        even = (even + 1) % 3;
       31:   40:        i = j;
       31:   41:        j = k;
       31:   42:        k = i + j;
        -:   43:    }
        -:   44:
        1:   45:    fprintf(stdout, "%s: solution: %d\n",
        -:   46:            argv[0], sum);
        1:   47:    return 0;
        -:   48:}
