# Project Euler Problem 8 Solution
#
# Problem statement:
#   The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

#   73167176531330624919225119674426574742355349194934
#   96983520312774506326239578318016984801869478851843
#   85861560789112949495459501737958331952853208805511
#   12540698747158523863050715693290963295227443043557
#   66896648950445244523161731856403098711121722383113
#   62229893423380308135336276614282806444486645238749
#   30358907296290491560440772390713810515859307960866
#   70172427121883998797908792274921901699720888093776
#   65727333001053367881220235421809751254540594752243
#   52584907711670556013604839586446706324415722155397
#   53697817977846174064955149290862569321978468622482
#   83972241375657056057490261407972968652414535100474
#   82166370484403199890008895243450658541227588666881
#   16427171479924442928230863465674813919123162824586
#   17866458359124566529476545682848912883142607690042
#   24219022671055626321111109370544217506941658960408
#   07198403850962455444362981230987879927244284909188
#   84580156166097919133875499200524063689912560717606
#   05886116467109405077541002256983155200055935729725
#   71636269561882670428252483600823257530420752963450

#   Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

# Solution description: TODO

# Author: Tom Praschan
# Date: 2018/2/10
# License: MIT (see ../LICENSE.md)

import time
import argparse
from numpy import prod # Like the python built-in sum() but calculates the product instead

def bruteforce_product(num, n):
    """
    Given a list of ints (num) this function calculates the largest product of n adjacent numbers in the list 
    """
    m = 0 # Stores the current maximum
    for i in range(0, len(num) - n):
        p = prod(num[i:i+n])
        if p > m:
            m = p
    return m


def faster_product(num, n):
    """
    Same as bruteforce_product, but faster by skipping most 0s
    """

    # If one of the first n digits contains a 0, 
    # we can skip those and start right at the nth digit
    start = n if n in num[:n] else 0

    m = prod(num[start:start+n]) # Stores the current maximum

    i = start + 1 # Loop variable
    while i < len(num) - n:
        # If the next digit is a 0 skip n digits ahead
        if num[i + n - 1] == 0:
            i += n
        else:
            p = prod(num[i:i+n])
            if p > m:
                m = p
            i += 1
    return m


if __name__ == "__main__":
    input_number = '73167176531330624919225119674426574742355349194934969835203127745063262395783180169848018694788518438586156078911294949545950173795833195285320880551112540698747158523863050715693290963295227443043557668966489504452445231617318564030987111217223831136222989342338030813533627661428280644448664523874930358907296290491560440772390713810515859307960867017242712188399879790879227492190169972088809377665727333001053367881220235421809751254540594752245258490771167055601360483958644670632441572215539536978179778461740649551492908625693219784686224883972241375657056057490261407972968652414535100478216637048440319989000889524345065854122758866688164271714799244429282308634656748139191231628245817866458359124566529476545682848912883142607690042421902267105562632111110937054421750694165896040071984038509624554443629812309878799272442849091884580156166097919133875499200524063689912560717600588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450'
    
    # Convert to a list of ints for convenience
    num_list = [int(c) for c in input_number] 

    parser = argparse.ArgumentParser()
    parser.add_argument("-n", type=int, default=13, help='Number of adjacent digits to multiply (default is 13)')
    args = parser.parse_args()

    start = time.time()
    solution = bruteforce_product(num_list, args.n)
    end = time.time()
    print(f"Bruteforce Solution: {solution}")
    print(f"Elapsed time: {(end - start):.6f}s")

    start = time.time()
    faster_solution = faster_product(num_list, args.n)
    end = time.time()
    print(f"Faster Solution: {faster_solution}")
    print(f"Elapsed time: {(end - start):.6f}s")
