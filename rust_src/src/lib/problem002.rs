/* Project Euler Problem 2 Solution
 *
 * Problem statement:
 * Each new term in the Fibonacci sequence is generated by adding
 * the previous two terms. By starting with 1 and 2, the first 10
 * terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values
 * do not exceed four million, find the sum of the even-valued terms.
 *
 * Solution description:
 * Brute-force.
 *
 * Author: Daniel Schuette
 * Date: 2019/02/27
 * License: MIT (see ../LICENSE.md)
 */
// Return a vector of the Fibonacci terms that do not exceed `n'.
pub fn fibonacci_vec(n: i64) -> Vec<i64> {
    let mut fib: Vec<i64> = Vec::new();

    // handle corner cases
    if n < 1 {
        return fib; /* return the empty vector */
    }

    // push 1 onto the vector and return if `n'==1
    fib.push(1);
    if n == 1 {
        return fib;
    }

    // push 2 onto the vector and return if `n'==1
    fib.push(2);
    if n == 2 {
        return fib;
    }

    // declare variables to use for fib seq
    let mut current: i64 = 1;
    let mut next: i64 = 2;
    let mut temp: i64;

    // infinite loop until next fib term > `n'
    loop {
        temp = next;
        next += current;
        current = temp;

        // break if next term is larger then target
        if next > n {
            break;
        }

        // otherwise, push next onto vector
        fib.push(next);
    }
    return fib;
} // #no_code

pub fn sum_even_terms_vec(vec: Vec<i64>) -> i64 {
    let mut sum: i64 = 0;

    for elem in vec {
        if elem % 2 == 0 {
            sum += elem;
        }
    }
    return sum;
}
